{"version":3,"file":"static/js/267.e3429fc8.chunk.js","mappings":"qNAMe,SAASA,EAAT,GAA8B,IAATC,EAAQ,EAARA,KAC5BC,GAAWC,EAAAA,EAAAA,MACVC,EAAaH,EAAKI,KAAI,YAA6C,IAA3CC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aACpD,OAAM,SAAC,KAAD,WACJ,UAAC,KAAD,CAAUC,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMV,GAA9C,WAA0D,gBAAKW,IAAsB,OAAhBN,EAAD,UAN1D,mCAM0D,OAAuCA,GAAgBO,EAAUC,IAAKP,EAAOQ,MAAM,SACrJ,SAAC,KAAD,UAAYR,KACZ,UAAC,KAAD,4BAAyBC,SAHZH,EAMlB,IAEF,OACE,SAAC,KAAD,UACGF,GAGN,C,sICnBYa,EAAY,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAClC,OACI,SAAC,KAAD,CACEC,KAAK,OACLF,MAASA,EACTG,YAAY,oBACZF,SAAU,SAAAG,GAAC,OAAIH,EAASG,EAAEC,OAAOL,MAAtB,GAGhB,E,6CCkED,EAtEe,WAAO,IAAD,EACnB,GAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BP,EAAAA,EAAAA,UAAS,IAAnC,eAAOQ,EAAP,KAAcC,EAAd,KAIMC,EAAe,UAAGJ,EAAaK,IAAI,iBAApB,QAAiC,GAChDC,EAAcF,EAAgBG,cAC9BC,EAAU,mCAAG,WAAON,GAAP,mGAGYO,EAAAA,EAAAA,GAAO,UAAW,GAAI,GAAhB,iBAA8BP,IAHhD,OAGTQ,EAHS,OAITvC,EAAOuC,EAAavC,KAAKwC,QAC/Bf,EAAUzB,GACVyC,aAAaC,QAAQ,SAAUC,KAAKC,UAAU5C,IAC1B,IAAhBA,EAAK6C,OACPlB,EAAS,iCAGTA,EAAS,MAXI,4GAAH,sDA4ChB,OArBAmB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmBN,aAAaO,QAAQ,UACnB,OAArBD,IACFE,QAAQC,IAAIH,GACZtB,EAAUkB,KAAKQ,MAAMJ,IACrBE,QAAQC,IAAI1B,IAEF,KAAVO,GAGJM,EAAWN,EAEZ,GAAE,CAACA,KACJe,EAAAA,EAAAA,YAAU,WAEiB,OADEL,aAAaO,QAAQ,WAE9CP,aAAaW,WAAW,SAG3B,GAAE,KAGD,iCACE,SAAC,KAAD,CAAMC,SA7BW,SAAChC,GACpBA,EAAEiC,iBACFL,QAAQC,IAAIf,GACZH,EAASC,EACV,EAyBG,UACE,SAACjB,EAAD,CACAC,MAAOgB,EACPf,SAtDe,SAAAD,GACnBa,EAA0B,KAAVb,EAAe,CAAEO,OAAQP,GAAU,CAAC,EACrD,MAwDe,OAAVS,EAA+B,KAAXF,GAAiB,SAACzB,EAAA,EAAD,CAAWC,KAAMwB,KAAa,oBAAe,SAAC+B,EAAA,EAAD,CAAOC,QAAU9B,KACrG,SAAC,EAAA+B,SAAD,CAAUC,SAAU,aAApB,UACU,SAAC,KAAD,QAIf,C","sources":["components/MovieItem.jsx","components/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import React from 'react';\nimport { useLocation} from 'react-router-dom';\nimport { List, Item, ItemTitle, LinkItem, ItemText } from '../MoviesStyled';\nimport NoPoster from \"../images/no_poster.jpeg\";\nconst imageUrl = 'https://image.tmdb.org/t/p/w500';\n\nexport default function MovieItem({ data }) {\n  const location = useLocation();\n   const listMovie =  data.map(({id, poster_path, title, release_date}) => {\n     return<Item key={id}>\n       <LinkItem to={`/movies/${id}`} state={{ from: location }}><img src={(poster_path !== null) ? `${imageUrl}${poster_path}` : NoPoster} alt={title} width=\"400\" />\n         <ItemTitle>{title}</ItemTitle>\n         <ItemText> Release date:{release_date}</ItemText>\n       </LinkItem>\n     </Item>\n   }\n   )\n  return (\n    <List>\n      {listMovie}\n    </List>\n  )\n}\n","import React from 'react';\nimport {Input} from \"../MoviesStyled\"\n\nexport const SearchBox = ({value, onChange}) => {\nreturn (\n    <Input\n      type='text'\n      value = {value}\n      placeholder='Insert your query'\n      onChange={e => onChange(e.target.value)}\n      />\n  )\n}","import { SearchBox } from 'components/SearchBox';\nimport React, {Suspense, useEffect, useState} from 'react'\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport Error from '../components/Error'\nimport MovieItem from 'components/MovieItem';\nimport { Search } from '../api/FetchConst'\nimport {Form} from \"../MoviesStyled\"\n\nconst Movies = () => {\n  const [search, setSearch] = useState([]);\n  const [error, setError] = useState(null)\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const [query, setQuery] = useState('')\n  const filterSearch = value => {\n    setSearchParams(value !== \"\" ? { search: value } : {})\n  }\n  const searchQueryFull = searchParams.get('search') ?? \"\";\n  const searchQuery = searchQueryFull.toLowerCase();\n  const fetchMovie = async (query) => {\n    try {\n\n      const searchResult = await Search(\"/search\", \"\", \"\", `&query=${query}`);\n      const data = searchResult.data.results;\n      setSearch(data)\n      localStorage.setItem('result', JSON.stringify(data))\n      if (data.length === 0) {\n        setError(`Not any movies for your query`)\n      }\n      else {\n        setError(null)\n      }   \n    }\n    catch (error) {    \n    }\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    console.log(searchQuery)\n    setQuery(searchQueryFull)\n  }\n\n  useEffect(() => {\n    const movieFromStorage = localStorage.getItem('result');\n      if (movieFromStorage !== null) {\n        console.log(movieFromStorage)\n        setSearch(JSON.parse(movieFromStorage));\n        console.log(search);\n      }\n    if (query === \"\") {\n    return\n    }\n    fetchMovie(query)\n     // eslint-disable-next-line \n  }, [query])\n  useEffect(() => {\n      const movieFromStorage = localStorage.getItem('result');\n    if (movieFromStorage !== null) { \n      localStorage.removeItem('result')\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <SearchBox\n        value={searchQueryFull}\n        onChange={filterSearch}\n      />\n    </Form>\n      \n      {(error === null) ? ((search !== \"\") ? <MovieItem data={search} /> : <div></div>) : <Error message={ error} />}\n      <Suspense fallback={\"Loading...\"}> \n                <Outlet/>\n            </Suspense>\n    </>\n  )\n}\nexport default Movies"],"names":["MovieItem","data","location","useLocation","listMovie","map","id","poster_path","title","release_date","to","state","from","src","NoPoster","alt","width","SearchBox","value","onChange","type","placeholder","e","target","useState","search","setSearch","error","setError","useSearchParams","searchParams","setSearchParams","query","setQuery","searchQueryFull","get","searchQuery","toLowerCase","fetchMovie","Search","searchResult","results","localStorage","setItem","JSON","stringify","length","useEffect","movieFromStorage","getItem","console","log","parse","removeItem","onSubmit","preventDefault","Error","message","Suspense","fallback"],"sourceRoot":""}